@page "/cheats/createdummyplayers"

@using YourGameServer.Interface
@using YourGameServer.Services
@using System.Text.RegularExpressions
@using System.Security.Cryptography

@inject NavigationManager navigationManager
@inject GameDbContext context

<MudPaper Class="pa-4 mr-16">
    <MudText Typo="Typo.h6" GutterBottom="true">Create Dummy Players</MudText>
    <MudGrid Class="pa-8">
        <MudNumericField Label="Count" Variant="Variant.Text" Min="1" Max="9999" @bind-Value="Count" />
        <MudButton Class="pl-4 ml-8" Variant="Variant.Filled" Color="Color.Primary" Disabled="@buttonDisabled" @onclick="Execute">Execute</MudButton>
        <MudButton Class="pl-4 ml-8" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@buttonDisabled" @onclick="DeleteAll">Delete All</MudButton>
    </MudGrid>
    <MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>MMHash</MudTh>
            <MudTh>By Hashids</MudTh>
            <MudTh>By Me</MudTh>
            <MudTh>No Shift</MudTh>
            <MudTh>No Hash</MudTh>
            <MudTh>No Shift No Hash</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id.ToString("#,0")</MudTd>
            <MudTd DataLabel="Hash">
                @context.Hash.ToString("#,0")<br />
                <MudText Typo="Typo.caption">@context.Hash.ToString("X")</MudText>
            </MudTd>
            <MudTd DataLabel="Code string">@context.Code1</MudTd>
            <MudTd DataLabel="Code string">@context.Code2</MudTd>
            <MudTd DataLabel="Code string">@context.Code3</MudTd>
            <MudTd DataLabel="Code string">@context.Code4</MudTd>
            <MudTd DataLabel="Code string">@context.Code5</MudTd>
        </RowTemplate>
    </MudTable>
    <MudOverlay Visible="buttonDisabled" DarkBackground="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>
</MudPaper>

@code {
    public int Count { get; set; } = 300;

    private bool buttonDisabled;

    private IEnumerable<TestCode> Elements = new List<TestCode>();

    public class TestCode
    {
        public ulong Id;
        public ulong Hash;
        public string Code1 = string.Empty;
        public string Code2 = string.Empty;
        public string Code3 = string.Empty;
        public string Code4 = string.Empty;
        public string Code5 = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var codes = new List<TestCode>();
        ulong[] radixl = {
            1,
            1_000,
            1_000_000,
            3_000_000,
            5_000_000,
            1_000_000_000,
            2_000_000_000,
            3_000_000_000,
            5_000_000_000,
            10_000_000_000,
            100_000_000_000,
            1_000_000_000_000,
            1_000_000_000_000_000,
            1_000_000_000_000_000_000,
            9_000_000_000_000_000_000
        };
        for (int i = 0; i < radixl.Length; ++i) {
            for(int j = 0; j < 10; ++j) {
                ulong id = radixl[i] + (ulong)j;
                ushort secret = (ushort)RandomNumberGenerator.GetInt32(0x10000);
                codes.Add(new() {
                    Id = id,
                    Hash = id * PlayerCode.Prime + 1,
                    Code1 = Regex.Replace(IDCoder.Encode(id, 0), ".{4}(?!$)", "$0-"),
                    Code2 = PlayerCode.FromIDAndSecret(id, secret, true).ToString("-"),
                    Code3 = PlayerCode.FromIDAndSecret(id, secret, true).ToString("-noshift"),
                    Code4 = PlayerCode.FromIDAndSecret(id, secret, false).ToString("-"),
                    Code5 = PlayerCode.FromIDAndSecret(id, 0, false).ToString("-noshift")
                });
            }
        }
        for(int i = 0; i < 10; ++i) {
            ulong id = ulong.MaxValue - 9 + (ulong)i;
            ushort secret = (ushort)RandomNumberGenerator.GetInt32(0x10000);
            codes.Add(new() {
                Id = id,
                Hash = id * PlayerCode.Prime + 1,
                Code1 = Regex.Replace(IDCoder.Encode(id, 0), ".{4}(?!$)", "$0-"),
                Code2 = PlayerCode.FromIDAndSecret(id, secret, true).ToString("-"),
                Code3 = PlayerCode.FromIDAndSecret(id, secret, true).ToString("-noshift"),
                Code4 = PlayerCode.FromIDAndSecret(id, secret, false).ToString("-"),
                Code5 = PlayerCode.FromIDAndSecret(id, 0, false).ToString("-noshift")
            });
        }
        Elements = codes;
        await Task.CompletedTask;
    }

    private async Task Execute()
    {
        buttonDisabled = true;
        await Task.Delay(1);
        Console.WriteLine($"LocalRootPathComponent {navigationManager.ToLocalBasePathComponent()}");

        var fakers = new Faker[] {
            new Faker("en"),
            new Faker("fr"),
            new Faker("de"),
            new Faker("it"),
            new Faker("es"),
            new Faker("ja"),
            new Faker("zh_CN"),
            new Faker("zh_TW"),
            new Faker("ko"),
        };

        for(int i = 0; i < Count; ++i) {
            var faker = fakers[Random.Shared.Next(fakers.Length)];
            var playerAccount = await AccountService.CreateAccountAsync(context, new SignInRequest {
                DeviceType = (DeviceType)Random.Shared.Next(2),
                DeviceId = faker.System.AndroidId()
            });
            playerAccount.Profile.Name = faker.Name.FullName();
            playerAccount.Profile.Motto = faker.Lorem.Sentence(8);
        }
        await context.SaveChangesAsync();
        buttonDisabled = false;
        await Task.Delay(1);
    }

    private async Task DeleteAll()
    {
        buttonDisabled = true;

        await Task.Delay(1);

        context.PlayerAccounts.RemoveRange(context.PlayerAccounts);

        await context.SaveChangesAsync();
        buttonDisabled = false;

        await Task.Delay(1);
    }
}
