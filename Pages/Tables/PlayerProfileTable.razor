@page "/tables/playerprofile"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.IScrollManager scrollManager
@inject MudBlazor.IDialogService dialogService
@inject MudBlazor.ISnackbar snackBar

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-IsExpanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.OwnerId" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.OwnerId))" T="ulong" Min="0" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.LastUpdate" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.LastUpdate))" />
                    <MudTimePicker Time="_newItem.LastUpdate?.TimeOfDay" Label="LastUpdate" TimeChanged="(t) => _newItem.LastUpdate = _newItem.LastUpdate?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.Name" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.Name))" />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.Motto" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.Motto))" />
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.IconBlobId" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.IconBlobId))" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudDataGrid Items="dbContext.PlayerProfiles" Sortable="true" Filterable="true" QuickFilter="QuickFilter" ReadOnly="false" EditMode="@DataGridEditMode.Inline">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for PlayerProfiles..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="PlayerProfile" Field="Id">
            <EditTemplate>
                @context.Id
                <MudFab @onclick="@(async () => await Delete(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </EditTemplate>
        </Column>
        <Column T="PlayerProfile" Field="OwnerId" />
        <Column T="PlayerProfile" Field="LastUpdate">
            <EditTemplate>
                <MudDatePicker @bind-Date="context.LastUpdate" />
                <MudTimePicker Time="context.LastUpdate?.TimeOfDay" TimeChanged="(t) => context.LastUpdate = context.LastUpdate?.Date + t" />
            </EditTemplate>
        </Column>
        <Column T="PlayerProfile" Field="Name" />
        <Column T="PlayerProfile" Field="Motto" />
        <Column T="PlayerProfile" Field="IconBlobId" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PlayerProfile" />
    </PagerContent>
</MudDataGrid>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerProfile _newItem = new();

    static readonly string EditPanelId =  $"{nameof(PlayerProfile).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerProfile)}";
    static readonly string ListPanelText = nameof(PlayerProfile);

    private bool QuickFilter(PlayerProfile x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.Motto.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.Id} {x.IconBlobId}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        dbContext.Add(_newItem);
        await dbContext.SaveChangesAsync();
        snackBar.Add($"New {nameof(PlayerProfile)} (id:{_newItem.Id}) Created.", Severity.Success);
        _newItem = new ();
    }

    void Clear()
    {
        _newItem = new();
    }

    async Task Delete(PlayerProfile x)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{x}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        if (!(await dialogService.Show<ConfirmDialog>("Delete", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall }).Result).Cancelled) {
            dbContext.PlayerProfiles.Remove(x);
            await dbContext.SaveChangesAsync();
            snackBar.Add($"{nameof(PlayerProfile)} (id:{x.Id}) Deleted.", Severity.Success);
        }
    }
}
