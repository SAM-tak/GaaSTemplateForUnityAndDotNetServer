@page "/tables/playerprofile"

@inject YourGameServer.Shared.Data.GameDbContext _dbContext
@inject MudBlazor.IScrollManager _scrollManager
@inject MudBlazor.IDialogService _dialogService
@inject MudBlazor.ISnackbar _snackBar
@inject IHttpContextAccessor _httpContextAccessor
@inject ILogger<PlayerProfileTable> _logger

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-Expanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.OwnerId" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.OwnerId))" T="ulong" Min="0" />
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.LastUpdate))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.LastUpdate"/>
                    <MudNumericField T="double?" Label="Second" Adornment="Adornment.End" AdornmentText="s" Min="0.0" Max="59.9999999"
                    Value="_newItem.LastUpdate?.GetSecondPart()" ValueChanged="t => _newItem.LastUpdate = _newItem.LastUpdate?.ReplacedSecondPart(t)" />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.Name" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.Name))" />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.Motto" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.Motto))" />
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.IconBlobId" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.IconBlobId))" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudDataGrid T="PlayerProfile" Items="_dbContext.PlayerProfiles" SortMode="SortMode.Single" Filterable="true" QuickFilter="QuickFilter" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for PlayerProfiles..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.OwnerId" Editable="false" />
        <PropertyColumn Property="x => x.LastUpdate">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerProfile>(i => i.LastUpdate))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.LastUpdate"/>
                <MudNumericField T="double?" Label="Second" Adornment="Adornment.End" AdornmentText="s" Min="0.0" Max="59.9999999"
                Value="context.Item.LastUpdate?.GetSecondPart()" ValueChanged="t => context.Item.LastUpdate = context.Item.LastUpdate?.ReplacedSecondPart(t)" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Motto" />
        <PropertyColumn Property="x => x.IconBlobId" />
        <TemplateColumn Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Spacing="1" Justify="Justify.FlexEnd" Row="true">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await Delete(@context.Item))" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager />
    </PagerContent>
</MudDataGrid>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerProfile _newItem = new();

    static readonly string EditPanelId =  $"{nameof(PlayerProfile).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerProfile)}";
    static readonly string ListPanelText = nameof(PlayerProfile);

    private bool QuickFilter(PlayerProfile x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.Name is not null && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.Motto is not null && x.Motto.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.OwnerId} {x.IconBlobId}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        try {
            await _dbContext.AddAsync(_newItem);
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("{User}|New {Table} (OwnerId:{OwnerId}) created.",
                _httpContextAccessor.GetNameAndIdentifier(), nameof(PlayerProfile), _newItem.OwnerId);
            _snackBar.Add($"New {nameof(PlayerProfile)} (OwnerId:{_newItem.OwnerId}) Created.", Severity.Success);
            _newItem = new ();
        }
        catch(Exception ex) {
            _snackBar.Add($"Create {nameof(PlayerProfile)} (OwnerId:{_newItem.OwnerId}) failed. {ex}", Severity.Error);
        }
    }

    async Task CommittedItemChanges(PlayerProfile item)
    {
        var updatee = await _dbContext.PlayerProfiles.FindAsync(item.OwnerId);
        if(updatee != null) {
            updatee = item;
            _dbContext.Entry(updatee).State = EntityState.Modified;
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("{User}|{Table} (OwnerId:{OwnerId}) updated.",
                _httpContextAccessor.GetNameAndIdentifier(), nameof(PlayerProfile), item.OwnerId);
            _snackBar.Add($"{nameof(PlayerProfile)} (OwnerId:{item.OwnerId}) updated.", Severity.Success);
        }
        else {
            _snackBar.Add($"{nameof(PlayerProfile)} (OwnerId:{item.OwnerId}) not found.", Severity.Error);
        }
    }

    void Clear()
    {
        _newItem = new();
    }

    async Task Delete(PlayerProfile item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{item}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = await _dialogService.ShowAsync<ConfirmDialog>("Delete", parameters, new() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall });
        if(!(await dialog.Result)!.Canceled) {
            _dbContext.PlayerProfiles.Remove(item);
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("{User}|{Table} (OwnerId:{OwnerId}) deleted.",
                _httpContextAccessor.GetNameAndIdentifier(), nameof(PlayerProfile), item.OwnerId);
            _snackBar.Add($"{nameof(PlayerProfile)} (ownerid:{item.OwnerId}) deleted.", Severity.Success);
        }
    }
}
