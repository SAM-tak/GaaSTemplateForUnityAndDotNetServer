@page "/tables/playeraccount"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.IScrollManager scrollManager
@inject MudBlazor.IDialogService dialogService
@inject MudBlazor.ISnackbar snackBar

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-IsExpanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudTextField @bind-Value="@_newItem.Code" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Code))" />
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="@_newItem.CurrentDeviceId" T="ulong" Min="0" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.CurrentDeviceId))" />
                </MudTd>
                <MudTd>
                    <MudSelect T="PlayerAccountKind" @bind-Value="_newItem.Kind" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Kind))">
                        @foreach (PlayerAccountKind item in Enum.GetValues(typeof(PlayerAccountKind)))
                        {
                                <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="PlayerAccountStatus" @bind-Value="_newItem.Status" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Status))">
                        @foreach (PlayerAccountStatus item in Enum.GetValues(typeof(PlayerAccountStatus)))
                        {
                                <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.Since" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Since))" />
                    <MudTimePicker Time="_newItem.Since?.TimeOfDay" TimeChanged="(t) => _newItem.Since = _newItem.Since?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.LastLogin" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.LastLogin))" />
                    <MudTimePicker Time="_newItem.LastLogin?.TimeOfDay" TimeChanged="(t) => _newItem.LastLogin = _newItem.LastLogin?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.InactivateDate" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.InactivateDate))" />
                    <MudTimePicker Time="_newItem.InactivateDate?.TimeOfDay" TimeChanged="(t) => _newItem.InactivateDate = _newItem.InactivateDate?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.BanDate" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.BanDate))" />
                    <MudTimePicker Time="_newItem.BanDate?.TimeOfDay" TimeChanged="(t) => _newItem.BanDate = _newItem.BanDate?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.ExpireDate" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.ExpireDate))" />
                    <MudTimePicker Time="_newItem.ExpireDate?.TimeOfDay" TimeChanged="(t) => _newItem.ExpireDate = _newItem.ExpireDate?.Date + t" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudTable T="PlayerAccount" Items="dbContext.PlayerAccounts" Filter="Search" Hover="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="@(async (x) => await ItemHasBeenCommitted(x))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="@PlaceholderText" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.Id))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.Code))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.CurrentDeviceId))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.Kind))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.Status))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.Since))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.LastLogin))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.InactivateDate))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.BanDate))</MudTh>
        <MudTh>@(TextHelper.LabelFor<PlayerAccount>(i => i.ExpireDate))</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd DataLabel="CurrentDeviceId">@context.CurrentDeviceId</MudTd>
        <MudTd DataLabel="Kind">@context.Kind</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Since">@context.Since</MudTd>
        <MudTd DataLabel="LastLogin">@context.LastLogin</MudTd>
        <MudTd DataLabel="InactivateDate">@context.InactivateDate</MudTd>
        <MudTd DataLabel="BanDate">@context.BanDate</MudTd>
        <MudTd DataLabel="ExpireDate">@context.ExpireDate</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(async () => await Delete(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Code">
            <MudTextField @bind-Value="@context.Code" />
        </MudTd>
        <MudTd DataLabel="CurrentDeviceId">
            <MudNumericField @bind-Value="@context.CurrentDeviceId" T="ulong" Min="0" />
        </MudTd>
        <MudTd DataLabel="Kind">
            <MudSelect T="PlayerAccountKind" @bind-Value="context.Kind">
                @foreach (PlayerAccountKind item in Enum.GetValues(typeof(PlayerAccountKind)))
                {
                    <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Status">
            <MudSelect T="PlayerAccountStatus" @bind-Value="context.Status">
                @foreach (PlayerAccountStatus item in Enum.GetValues(typeof(PlayerAccountStatus)))
                {
                    <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Since">
            <MudDatePicker @bind-Date="context.Since" />
            <MudTimePicker Time="context.Since?.TimeOfDay" TimeChanged="(t) => context.Since = context.Since?.Date + t" />
        </MudTd>
        <MudTd DataLabel="LastLogin">
            <MudDatePicker @bind-Date="context.LastLogin" />
            <MudTimePicker Time="context.LastLogin?.TimeOfDay" TimeChanged="(t) => context.LastLogin = context.LastLogin?.Date + t" />
        </MudTd>
        <MudTd DataLabel="InactivateDate">
            <MudDatePicker @bind-Date="context.InactivateDate" />
            <MudTimePicker Time="context.InactivateDate?.TimeOfDay" TimeChanged="(t) => context.InactivateDate = context.InactivateDate?.Date + t" />
        </MudTd>
        <MudTd DataLabel="BanDate">
            <MudDatePicker @bind-Date="context.BanDate" />
            <MudTimePicker Time="context.BanDate?.TimeOfDay" TimeChanged="(t) => context.BanDate = context.BanDate?.Date + t" />
        </MudTd>
        <MudTd DataLabel="ExpireDate">
            <MudDatePicker @bind-Date="context.ExpireDate" />
            <MudTimePicker Time="context.ExpireDate?.TimeOfDay" TimeChanged="(t) => context.ExpireDate = context.ExpireDate?.Date + t" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerAccount _newItem = new();

    PlayerAccount _backup;

    static readonly string EditPanelId =  $"{nameof(PlayerAccount).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerAccount)}";
    static readonly string ListPanelText = nameof(PlayerAccount);
    static readonly string PlaceholderText = $"Search for {nameof(PlayerAccount)}...";

    private bool Search(PlayerAccount x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.Id} {x.Since} {x.LastLogin}".Contains(_searchString)) return true;

        return false;
    }
    
    async Task OnValidSubmit(EditContext contex)
    {
        dbContext.Add(_newItem);
        await dbContext.SaveChangesAsync();
        snackBar.Add($"New {nameof(PlayerAccount)} (id:{_newItem.Id}) Created.", Severity.Success);
        _newItem = new ();
    }

    void Clear()
    {
        _newItem = new ();
    }

    void BackupItem(object x)
    {
        _backup = ((PlayerAccount)x) with {};
    }

    async Task ItemHasBeenCommitted(object x)
    {
        //AddEditionEvent($"RowEditCommit event: Changes to Element {((PlayerAccount)element).Name} committed");
        var record = (PlayerAccount)x;
        dbContext.Entry(record).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
        await dbContext.SaveChangesAsync();
        snackBar.Add($"{nameof(PlayerAccount)} (id:{record.Id}) Saved.", Severity.Success);
    }

    void ResetItemToOriginalValues(object x)
    {
        //AddEditionEvent($"RowEditCancel event: Editing of Element {((PlayerAccount)element).Id} cancelled");
        ((PlayerAccount)x).CopyFrom(_backup);
    }

    async Task Save(PlayerAccount x)
    {
        dbContext.Entry(x).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
        await dbContext.SaveChangesAsync();
        snackBar.Add($"{nameof(PlayerAccount)} (id:{x.Id}) Saved.", Severity.Success);
    }

    async Task Delete(PlayerAccount x)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{x}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        if (!(await dialogService.Show<ConfirmDialog>("Delete", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall }).Result).Cancelled) {
            dbContext.PlayerAccounts.Remove(x);
            await dbContext.SaveChangesAsync();
            snackBar.Add($"{nameof(PlayerAccount)} (id:{x.Id}) Deleted.", Severity.Success);
        }
    }
}
