@page "/tables/playeraccount"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.ISnackbar snackBar

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit PlayerAccount</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (playerAccount.Id > 0)
        {
            <MudTextField Value="@playerAccount.Id" Label="Id" ReadOnly="true" Margin="Margin.Normal" />
        }
        else
        {
            <MudText Label="Id" Margin="Margin.Normal">New Item</MudText>
        }
        <MudTextField Value="@playerAccount.Luid" Label="Luid" ReadOnly="true" Margin="Margin.Normal" />
        <MudNumericField @bind-Value="playerAccount.CurrentDeviceId" Label="CurrentDeviceId" Margin="Margin.Normal" />
        <MudSelect @bind-Value="playerAccount.Status" Label="Status" Margin="Margin.Normal">
            @foreach (PlayerAccountStatus item in Enum.GetValues(typeof(PlayerAccountStatus)))
            {
                <MudSelectItem Value="@item">@(item.ToString())</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker Date="playerAccount.Since" Label="Since" ReadOnly="true" Margin="Margin.Normal"/>
        <MudDatePicker Date="playerAccount.LastLogin" Label="LastLogin" ReadOnly="true" Margin="Margin.Normal" />
        <MudDatePicker @bind-Date="playerAccount.InactivateDate" Label="InactivateDate" Margin="Margin.Normal" />
        <MudDatePicker @bind-Date="playerAccount.BanDate" Label="BanDate" Margin="Margin.Normal" />
        <MudDatePicker @bind-Date="playerAccount.ExpireDate" Label="ExpireDate" Margin="Margin.Normal" />
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(async () => await Save(playerAccount))">
            @if (playerAccount.Id > 0)
            {
                @: Save Change
            }
            else
            {
                @: Create New
            }
        </MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="dbContext.PlayerAccounts" Filter="Search" @bind-customer="playerAccount">
    <ToolBarContent>
        <MudText Typo="Typo.h6">PlayerAccount</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for Students..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Luid</MudTh>
        <MudTh>CurrentDeviceId</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Since</MudTh>
        <MudTh>LastLogin</MudTh>
        <MudTh>InactivateDate</MudTh>
        <MudTh>BanDate</MudTh>
        <MudTh>ExpireDate</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Luid">@context.Luid</MudTd>
        <MudTd DataLabel="CurrentDeviceId">@context.CurrentDeviceId</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Since">@context.Since.ToShortDateString()</MudTd>
        <MudTd DataLabel="LastLogin">@context.LastLogin.ToShortDateString()</MudTd>
        <MudTd DataLabel="InactivateDate">@context.InactivateDate?.ToShortDateString()</MudTd>
        <MudTd DataLabel="BanDate">@context.BanDate?.ToShortDateString()</MudTd>
        <MudTd DataLabel="ExpireDate">@context.ExpireDate?.ToShortDateString()</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(async () => await Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    string _searchString = "";
    
    PlayerAccount playerAccount = new();
    
    private bool Search(PlayerAccount x)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Luid.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.Since} {x.LastLogin}".Contains(_searchString))
            return true;

        return false;
    }

    void Clear()
    {
        this.playerAccount = new();
    }
    void Edit(PlayerAccount playerAccount)
    {
        this.playerAccount = playerAccount;
    }

    async Task Save(PlayerAccount playerAccount)
    {
        dbContext.Entry(playerAccount).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
        await dbContext.SaveChangesAsync();
        snackBar.Add("PlayerAccount Saved.", Severity.Success);
    }

    async Task Create(PlayerAccount playerAccount)
    {
        dbContext.Add(playerAccount);
        await dbContext.SaveChangesAsync();
        playerAccount = new PlayerAccount();
        snackBar.Add("PlayerAccount Saved.", Severity.Success);
    }

    async Task Delete(PlayerAccount playerAccount)
    {
        dbContext.PlayerAccounts.Remove(playerAccount);
        await dbContext.SaveChangesAsync();
        snackBar.Add("PlayerAccount Deleted.", Severity.Success);
    }
}
