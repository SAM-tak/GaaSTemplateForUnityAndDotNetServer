@page "/tables/product"

@inject YourGameServer.Shared.Data.GameDbContext _dbContext
@inject MudBlazor.IScrollManager _scrollManager
@inject MudBlazor.IDialogService _dialogService
@inject MudBlazor.ISnackbar _snackBar
@inject IHttpContextAccessor _httpContextAccessor
@inject ILogger<ProductTable> _logger

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-Expanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.Id" Label="@(TextHelper.LabelFor<Product>(i => i.Id))" />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.ProductName" Label="@(TextHelper.LabelFor<Product>(i => i.ProductName))" />
                    <MudSelect T="Store" @bind-Value="_newItem.Store"
                        Label="@(TextHelper.LabelFor<Product>(i => i.Store))">
                        @foreach (Store item in Enum.GetValues(typeof(Store)))
                        {
                            <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.DisplayName" Label="@(TextHelper.LabelFor<Product>(i => i.DisplayName))" />
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.Description" Label="@(TextHelper.LabelFor<Product>(i => i.Description))" Style="width:200px;" Lines="3" />
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.IconBlobId" Label="@(TextHelper.LabelFor<Product>(i => i.IconBlobId))" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudDataGrid T="Product" Items="_dbContext.Products" SortMode="SortMode.Single" Filterable="true" QuickFilter="QuickFilter" ReadOnly="false" CommittedItemChanges="@CommittedItemChanges" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for Products..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Editable="false" />
        <PropertyColumn Property="x => x.Store">
            <EditTemplate>
                <MudSelect T="Store" @bind-Value="context.Item.Store"
                    Label="@(TextHelper.LabelFor<Product>(i => i.Store))">
                    @foreach (Store item in Enum.GetValues(typeof(Store)))
                    {
                        <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ProductName" />
        <PropertyColumn Property="x => x.DisplayName" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.IconBlobId">
            <EditTemplate>
                <MudNumericField T="ulong" @bind-Value="@context.Item.IconBlobId" Min="0" Label="@(TextHelper.LabelFor<Product>(i => i.IconBlobId))" />
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Spacing="1" Justify="Justify.FlexEnd" Row="true">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await Delete(@context.Item))" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager />
    </PagerContent>
</MudDataGrid>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    Product _newItem = new();

    static readonly string EditPanelId =  $"{nameof(Product).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(Product)}";
    static readonly string ListPanelText = nameof(Product);

    private bool QuickFilter(Product x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.DisplayName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.IconBlobId}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        try {
            await _dbContext.AddAsync(_newItem);
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("{User}|New {Table} (Id:{Id}) created.", _httpContextAccessor.GetNameAndIdentifier(), nameof(Product), _newItem.Id);
            _snackBar.Add($"New {nameof(Product)} (Id:{_newItem.Id}) created.", Severity.Success);
            _newItem = new ();
        }
        catch(Exception ex) {
            _snackBar.Add($"Create {nameof(Product)} (Id:{_newItem.Id}) failed. {ex}", Severity.Error);
        }
    }

    async Task CommittedItemChanges(Product item)
    {
        var updatee = await _dbContext.Products.FindAsync(item.Id);
        if(updatee != null) {
            updatee = item;
            _dbContext.Entry(updatee).State = EntityState.Modified;
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("{User}|{Table} (Id:{Id}) updated.", _httpContextAccessor.GetNameAndIdentifier(), nameof(Product), item.Id);
            _snackBar.Add($"{nameof(Product)} (Id:{item.Id}) updated.", Severity.Success);
        }
        else {
            _snackBar.Add($"{nameof(Product)} (Id:{item.Id}) not found.", Severity.Error);
        }
    }

    void Clear()
    {
        _newItem = new();
    }

    async Task Delete(Product item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{item}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = await _dialogService.ShowAsync<ConfirmDialog>("Delete", parameters, new() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall });
        if(!(await dialog.Result)!.Canceled) {
            _dbContext.Products.Remove(item);
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("{User}|{Table} (Id:{Id}) deleted.", _httpContextAccessor.GetNameAndIdentifier(), nameof(Product), item.Id);
            _snackBar.Add($"{nameof(Product)} (Id:{item.Id}) deleted.", Severity.Success);
        }
    }
}
