@page "/tables/playerdevice"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.IScrollManager scrollManager
@inject MudBlazor.IDialogService dialogService
@inject MudBlazor.ISnackbar snackBar

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-IsExpanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.OwnerId" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.OwnerId))" T="ulong" Min="0" />
                </MudTd>
                <MudTd>
                    <MudSelect @bind-Value="_newItem.DeviceType" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.DeviceType))">
                        @foreach (DeviceType item in Enum.GetValues(typeof(DeviceType)))
                        {
                            <MudSelectItem Value="@item">@(item.GetDisplayName())</MudSelectItem>
                        }
                </MudSelect>
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.DeviceId" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.DeviceId))" />
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.Since))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.Since"/>
                    <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                        Value="_newItem.Since?.GetMillisecondPart()" ValueChanged="t => _newItem.Since = _newItem.Since?.ReplacedMillisecondPart(t)" />
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.LastUsed))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.LastUsed"/>
                    <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                        Value="_newItem.LastUsed?.GetMillisecondPart()" ValueChanged="t => _newItem.LastUsed = _newItem.LastUsed?.ReplacedMillisecondPart(t)" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudDataGrid T="PlayerDevice" Items="dbContext.PlayerDevices" Sortable="true" Filterable="true" QuickFilter="QuickFilter" ReadOnly="false"
    CommittedItemChanges="@(async () => await dbContext.SaveChangesAsync())" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for PlayerDevices..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <Columns>
        <Column T="PlayerDevice" Field="Id" IsEditable="false" />
        <Column T="PlayerDevice" Field="OwnerId" />
        <Column T="PlayerDevice" Field="DeviceType">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.DeviceType">
                    @foreach (DeviceType item in Enum.GetValues(typeof(DeviceType)))
                    {
                        <MudSelectItem Value="@item">@(item.GetDisplayName())</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="PlayerDevice" Field="DeviceId" CellStyle="word-break: break-all" />
        <Column T="PlayerDevice" Field="Since">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.Since))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.Since"/>
                <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                    Value="context.Item.Since?.GetMillisecondPart()" ValueChanged="t => context.Item.Since = context.Item.Since?.ReplacedMillisecondPart(t)" />
            </EditTemplate>
        </Column>
        <Column T="PlayerDevice" Field="LastUsed">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerDevice>(i => i.LastUsed))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.LastUsed"/>
                <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                    Value="context.Item.LastUsed?.GetMillisecondPart()" ValueChanged="t => context.Item.LastUsed = context.Item.LastUsed?.ReplacedMillisecondPart(t)" />
            </EditTemplate>
        </Column>
        <Column T="PlayerDevice" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Spacing="1" Row="true">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await Delete(@context.Item))" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                </MudStack>
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PlayerDevice" />
    </PagerContent>
</MudDataGrid>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerDevice _newItem = new();

    static readonly string EditPanelId =  $"{nameof(PlayerDevice).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerDevice)}";
    static readonly string ListPanelText = nameof(PlayerDevice);

    private bool QuickFilter(PlayerDevice x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.DeviceId.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.Id} {x.OwnerId} {x.Since} {x.LastUsed}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        dbContext.Add(_newItem);
        await dbContext.SaveChangesAsync();
        snackBar.Add($"New {nameof(PlayerDevice)} (id:{_newItem.Id}) Created.", Severity.Success);
        _newItem = new ();
    }

    void Clear()
    {
        _newItem = new();
    }

    async Task Delete(PlayerDevice x)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{x}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        if (!(await dialogService.Show<ConfirmDialog>("Delete", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall }).Result).Cancelled) {
            dbContext.PlayerDevices.Remove(x);
            await dbContext.SaveChangesAsync();
            snackBar.Add($"{nameof(PlayerDevice)} (id:{x.Id}) Deleted.", Severity.Success);
        }
    }
}
