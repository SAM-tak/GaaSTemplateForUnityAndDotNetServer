@page "/utility/playercodeexamples"

<MudPaper Class="pa-4 mr-16">
    <MudText Typo="Typo.h6" GutterBottom="true">PlayerCode Exmaples</MudText>
    <MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Player Code</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id.ToString("#,0")</MudTd>
            <MudTd DataLabel="Player Code">@context.Code</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private IEnumerable<CodeExample> Elements = new List<CodeExample>();

    public class CodeExample
    {
        public ulong Id;
        public string Code = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        var codes = new List<CodeExample>();
        for(ulong id = 0; id < 3; ++id) {
            codes.Add(new() { Id = id, Code = IDCoder.Encode(id).ToHyphened() });
        }
        for (ulong id = 9999; id < 10002; ++id) {
            codes.Add(new() { Id = id, Code = IDCoder.Encode(id).ToHyphened() });
        }
        for (ulong id = 499999; id < 500002; ++id) {
            codes.Add(new() { Id = id, Code = IDCoder.Encode(id).ToHyphened() });
        }
        var maxLetter = IDCoder.Encode(ulong.MaxValue).Length;
        ulong lower = 1, upper = 2;
        for(int i = IDCoder.Encode(1).Length; i < maxLetter; ++i) {
            while(IDCoder.Encode(upper).Length < i + 1) upper *= 2;
            while(upper - lower > 1) {
                var mid = lower + (upper - lower) / 2;
                if(IDCoder.Encode(mid).Length == i) lower = mid;
                else upper = mid;
            }
            codes.Add(new() { Id = lower, Code = IDCoder.Encode(lower).ToHyphened() });
            codes.Add(new() { Id = upper, Code = IDCoder.Encode(upper).ToHyphened() });
            lower = upper;
        }
        for(int i = 0; i < 3; ++i) {
            ulong id = ulong.MaxValue - 3 + (ulong)i;
            codes.Add(new() { Id = id, Code = IDCoder.Encode(id).ToHyphened() });
        }
        Elements = codes;
        await Task.CompletedTask;
    }
}
