@page "/cheats/createdummyproducts"

@using System.Security.Cryptography

@inject NavigationManager navigationManager
@inject GameDbContext context

<MudPaper Class="pa-4 mr-16">
    <MudText Typo="Typo.h6" GutterBottom="true">Create Dummy Products</MudText>
    <MudGrid Class="pa-8">
        <MudNumericField Label="Count" Variant="Variant.Text" Min="1" Max="999" @bind-Value="Count" />
        <MudButton Class="pl-4 ml-8" Variant="Variant.Filled" Color="Color.Primary" Disabled="@buttonDisabled"
        @onclick="Execute">Execute</MudButton>
        <MudButton Class="pl-4 ml-8" Variant="Variant.Filled" Color="Color.Secondary" Disabled="@buttonDisabled" @onclick="DeleteAll">Delete All</MudButton>
    </MudGrid>
    <MudOverlay Visible="buttonDisabled" DarkBackground="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>
</MudPaper>

@code {
    public int Count { get; set; } = 10;

    private bool buttonDisabled;

    private async Task Execute()
    {
        buttonDisabled = true;
        await Task.Delay(1);
        @* Console.WriteLine($"LocalRootPathComponent {navigationManager.ToLocalBasePathComponent()}"); *@

        var fakers = new Faker[] {
            new Faker("en"),
            new Faker("fr"),
            new Faker("de"),
            new Faker("it"),
            new Faker("es"),
            new Faker("ja"),
            new Faker("zh_CN"),
            new Faker("zh_TW"),
            new Faker("ko"),
        };

        for(int i = 0; i < Count; ++i) {
            var faker = fakers[Random.Shared.Next(fakers.Length)];
            var productName = faker.Commerce.ProductName();
            var productId = string.Join('.', productName.Split(' ')).ToLower();
            try {
                await context.Products.AddAsync(new Product {
                    Id = productId,
                    Store = faker.Random.Enum<Store>(),
                    ProductName = $"{faker.Internet.DomainName()}.{productId}",
                    DisplayName = productName,
                    Description = faker.Commerce.ProductDescription(),
                    IconBlobId = faker.Random.ULong(),
                    StartAt = DateTime.UtcNow,
                    EndAt = DateTime.UtcNow + TimeSpan.FromDays(300)
                });
            }
            catch(Exception)
            {
            }
        }
        await context.SaveChangesAsync();
        buttonDisabled = false;
        await Task.Delay(1);
    }

    private async Task DeleteAll()
    {
        buttonDisabled = true;

        await Task.Delay(1);

        context.Products.RemoveRange(context.Products);

        await context.SaveChangesAsync();
        buttonDisabled = false;

        await Task.Delay(1);
    }
}
