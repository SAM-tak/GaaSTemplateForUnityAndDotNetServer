@page "/tables/playerownedserviceticket"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.IScrollManager scrollManager
@inject MudBlazor.IDialogService dialogService
@inject MudBlazor.ISnackbar snackBar

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-IsExpanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.OwnerId" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.OwnerId))" T="ulong" Min="0" />
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.ServiceTicketId" Label="ServiceTicketId" T="ulong" Min="0" />
                </MudTd>
                <MudTd>
                    <MudSelect T="ConsumableOrigin" @bind-Value="_newItem.Origin" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.Origin))">
                        @foreach (ConsumableOrigin item in Enum.GetValues(typeof(ConsumableOrigin)))
                        {
                            <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="ConsumableStatus" @bind-Value="_newItem.Status" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.Status))">
                        @foreach (ConsumableStatus item in Enum.GetValues(typeof(ConsumableStatus)))
                        {
                            <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.Period))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.Period"/>
                    <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                        Value="_newItem.Period?.GetMillisecondPart()" ValueChanged="t => _newItem.Period = _newItem.Period?.ReplacedMillisecondPart(t)" />
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.UsedDate))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.UsedDate"/>
                    <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                        Value="_newItem.UsedDate?.GetMillisecondPart()" ValueChanged="t => _newItem.UsedDate = _newItem.UsedDate?.ReplacedMillisecondPart(t)" />
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.InvalidateDate))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.InvalidateDate"/>
                    <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                        Value="_newItem.InvalidateDate?.GetMillisecondPart()" ValueChanged="t => _newItem.InvalidateDate = _newItem.InvalidateDate?.ReplacedMillisecondPart(t)" />
                </MudTd>
                <MudTd>
                    <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.ExpireDate))" InputType="InputType.DateTimeLocal" @bind-Value="_newItem.ExpireDate"/>
                    <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                        Value="_newItem.ExpireDate?.GetMillisecondPart()" ValueChanged="t => _newItem.ExpireDate = _newItem.ExpireDate?.ReplacedMillisecondPart(t)" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudDataGrid T="PlayerOwnedServiceTicket" Items="dbContext.PlayerOwnedServiceTickets" Sortable="true" Filterable="true" QuickFilter="QuickFilter" ReadOnly="false"
    CommittedItemChanges="@(async () => await dbContext.SaveChangesAsync())" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for PlayerProfiles..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <Columns>
        <Column T="PlayerOwnedServiceTicket" Field="Id" IsEditable="false" />
        <Column T="PlayerOwnedServiceTicket" Field="OwnerId" />
        <Column T="PlayerOwnedServiceTicket" Field="ServiceTicketId" />
        <Column T="PlayerOwnedServiceTicket" Field="Origin">
            <EditTemplate>
                <MudSelect T="ConsumableOrigin" @bind-Value="context.Item.Origin" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.Origin))">
                    @foreach (ConsumableOrigin item in Enum.GetValues(typeof(ConsumableOrigin)))
                    {
                        <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="PlayerOwnedServiceTicket" Field="Status">
            <EditTemplate>
                <MudSelect T="ConsumableStatus" @bind-Value="context.Item.Status" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.Status))">
                    @foreach (ConsumableStatus item in Enum.GetValues(typeof(ConsumableStatus)))
                    {
                        <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="PlayerOwnedServiceTicket" Field="Period">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.Period))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.Period"/>
                <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                    Value="context.Item.Period?.GetMillisecondPart()" ValueChanged="t => context.Item.Period = context.Item.Period?.ReplacedMillisecondPart(t)" />
            </EditTemplate>
        </Column>
        <Column T="PlayerOwnedServiceTicket" Field="UsedDate">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.UsedDate))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.UsedDate"/>
                <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                    Value="context.Item.UsedDate?.GetMillisecondPart()" ValueChanged="t => context.Item.UsedDate = context.Item.UsedDate?.ReplacedMillisecondPart(t)" />
            </EditTemplate>
        </Column>
        <Column T="PlayerOwnedServiceTicket" Field="InvalidateDate">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.InvalidateDate))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.InvalidateDate"/>
                <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                    Value="context.Item.InvalidateDate?.GetMillisecondPart()" ValueChanged="t => context.Item.InvalidateDate = context.Item.InvalidateDate?.ReplacedMillisecondPart(t)" />
            </EditTemplate>
        </Column>
        <Column T="PlayerOwnedServiceTicket" Field="ExpireDate">
            <EditTemplate>
                <MudTextField Format="s" Label="@(TextHelper.LabelFor<PlayerOwnedServiceTicket>(i => i.ExpireDate))" InputType="InputType.DateTimeLocal" @bind-Value="context.Item.ExpireDate"/>
                <MudNumericField T="double?" Label="Millisecond" Adornment="Adornment.End" AdornmentText="ms" Min="0.0" Max="999.9999"
                    Value="context.Item.ExpireDate?.GetMillisecondPart()" ValueChanged="t => context.Item.ExpireDate = context.Item.ExpireDate?.ReplacedMillisecondPart(t)" />
            </EditTemplate>
        </Column>
        <Column T="PlayerOwnedServiceTicket" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Spacing="1" Row="true">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await Delete(@context.Item))" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                </MudStack>
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PlayerOwnedServiceTicket" />
    </PagerContent>
</MudDataGrid>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerOwnedServiceTicket _newItem = new();

    static readonly string EditPanelId =  $"{nameof(PlayerOwnedServiceTicket).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerOwnedServiceTicket)}";
    static readonly string ListPanelText = nameof(PlayerOwnedServiceTicket);

    private bool QuickFilter(PlayerOwnedServiceTicket x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if ($"{x.Id} {x.Origin} {x.Status} {x.Period} {x.UsedDate} {x.InvalidateDate} {x.ExpireDate}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        dbContext.Add(_newItem);
        await dbContext.SaveChangesAsync();
        snackBar.Add($"New {nameof(PlayerOwnedServiceTicket)} (id:{_newItem.Id}) Created.", Severity.Success);
        _newItem = new ();
    }

    void Clear()
    {
        _newItem = new();

    }

    async Task Delete(PlayerOwnedServiceTicket x)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{x}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        if (!(await dialogService.Show<ConfirmDialog>("Delete", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall }).Result).Cancelled) {
            dbContext.PlayerOwnedServiceTickets.Remove(x);
            await dbContext.SaveChangesAsync();
            snackBar.Add($"{nameof(PlayerOwnedServiceTicket)} (id:{x.Id}) Deleted.", Severity.Success);
        }
    }
}
