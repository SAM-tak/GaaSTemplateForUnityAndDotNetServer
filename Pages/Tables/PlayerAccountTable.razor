@page "/tables/playeraccount"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.IDialogService dialogService
@inject MudBlazor.ISnackbar snackBar

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-IsExpanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudTextField @bind-Value="@_newItem.Code" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Code))" />
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="@_newItem.CurrentDeviceId" T="ulong" Min="0" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.CurrentDeviceId))" />
                </MudTd>
                <MudTd>
                    <MudSelect T="PlayerAccountKind" @bind-Value="_newItem.Kind" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Kind))">
                        @foreach (PlayerAccountKind item in Enum.GetValues(typeof(PlayerAccountKind)))
                        {
                            <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect T="PlayerAccountStatus" @bind-Value="_newItem.Status" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Status))">
                        @foreach (PlayerAccountStatus item in Enum.GetValues(typeof(PlayerAccountStatus)))
                        {
                            <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudDatePicker Editable="true" @bind-Date="_newItem.Since" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.Since))" />
                    <MudTimePicker Editable="true" Time="_newItem.Since?.TimeOfDay" TimeChanged="(t) => _newItem.Since = _newItem.Since?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker Editable="true" @bind-Date="_newItem.LastLogin" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.LastLogin))" />
                    <MudTimePicker Editable="true" Time="_newItem.LastLogin?.TimeOfDay" TimeChanged="(t) => _newItem.LastLogin = _newItem.LastLogin?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker Editable="true" @bind-Date="_newItem.InactivateDate" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.InactivateDate))" />
                    <MudTimePicker Editable="true" Time="_newItem.InactivateDate?.TimeOfDay" TimeChanged="(t) => _newItem.InactivateDate = _newItem.InactivateDate?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker Editable="true" @bind-Date="_newItem.BanDate" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.BanDate))" />
                    <MudTimePicker Editable="true" Time="_newItem.BanDate?.TimeOfDay" TimeChanged="(t) => _newItem.BanDate = _newItem.BanDate?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker Editable="true" @bind-Date="_newItem.ExpireDate" Label="@(TextHelper.LabelFor<PlayerAccount>(i => i.ExpireDate))" />
                    <MudTimePicker Editable="true" Time="_newItem.ExpireDate?.TimeOfDay" TimeChanged="(t) => _newItem.ExpireDate = _newItem.ExpireDate?.Date + t" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudDataGrid Items="dbContext.PlayerAccounts" Sortable="true" Filterable="true" QuickFilter="QuickFilter" ReadOnly="false" EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="@PlaceholderText" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
    </ToolBarContent>
    <Columns>
        <SelectColumn T="PlayerAccount" />
        <Column T="PlayerAccount" Field="Id" Sortable="false" Filterable="false" IsEditable="false">
            <EditTemplate>
                <MudTooltip Text="Delete">
                    <MudIconButton @onclick="@(async () => await Delete(@context.Item))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" />
                </MudTooltip>
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="Code" />
        <Column T="PlayerAccount" Field="CurrentDeviceId" />
        <Column T="PlayerAccount" Field="Kind">
            <EditTemplate>
                <MudSelect T="PlayerAccountKind" @bind-Value="context.Item.Kind">
                    @foreach (PlayerAccountKind item in Enum.GetValues(typeof(PlayerAccountKind)))
                    {
                        <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="Status">
            <EditTemplate>
                <MudSelect T="PlayerAccountStatus" @bind-Value="context.Item.Status">
                    @foreach (PlayerAccountStatus item in Enum.GetValues(typeof(PlayerAccountStatus)))
                    {
                        <MudSelectItem Value="@item">@item.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="Since">
            <EditTemplate>
                <MudDatePicker Editable="true" @bind-Date="context.Item.Since" />
                <MudTimePicker Editable="true" Time="context.Item.Since?.TimeOfDay" TimeChanged="(t) => context.Item.Since = context.Item.Since?.Date + t" />
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="LastLogin">
            <EditTemplate>
                <MudDatePicker Editable="true" @bind-Date="context.Item.LastLogin" />
                <MudTimePicker Editable="true" Time="context.Item.LastLogin?.TimeOfDay" TimeChanged="(t) => context.Item.LastLogin = context.Item.LastLogin?.Date + t" />
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="InactivateDate">
            <EditTemplate>
                <MudDatePicker Editable="true" @bind-Date="context.Item.InactivateDate" />
                <MudTimePicker Editable="true" Time="context.Item.InactivateDate?.TimeOfDay" TimeChanged="(t) => context.Item.InactivateDate = context.Item.InactivateDate?.Date + t" />
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="BanDate">
            <EditTemplate>
                <MudDatePicker Editable="true" @bind-Date="context.Item.BanDate" />
                <MudTimePicker Editable="true" Time="context.Item.BanDate?.TimeOfDay" TimeChanged="(t) => context.Item.BanDate = context.Item.Since?.Date + t" />
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" Field="ExpireDate">
            <EditTemplate>
                <MudDatePicker Editable="true" @bind-Date="context.Item.ExpireDate" />
                <MudTimePicker Editable="true" Time="context.Item.ExpireDate?.TimeOfDay" TimeChanged="(t) => context.Item.ExpireDate = context.Item.ExpireDate?.Date + t" />
            </EditTemplate>
        </Column>
        <Column T="PlayerAccount" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PlayerAccount" />
    </PagerContent>
</MudDataGrid>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerAccount _newItem = new();

    static readonly string EditPanelId =  $"{nameof(PlayerAccount).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerAccount)}";
    static readonly string ListPanelText = nameof(PlayerAccount);
    static readonly string PlaceholderText = $"Search for {nameof(PlayerAccount)}...";

    bool QuickFilter(PlayerAccount x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.Id} {x.Since} {x.LastLogin}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        dbContext.Add(_newItem);
        await dbContext.SaveChangesAsync();
        snackBar.Add($"New {nameof(PlayerAccount)} (id:{_newItem.Id}) Created.", Severity.Success);
        _newItem = new ();
    }

    void Clear()
    {
        _newItem = new ();
    }

    async Task Delete(PlayerAccount x)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{x}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        if (!(await dialogService.Show<ConfirmDialog>("Delete", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall }).Result).Cancelled) {
            dbContext.PlayerAccounts.Remove(x);
            await dbContext.SaveChangesAsync();
            snackBar.Add($"{nameof(PlayerAccount)} (id:{x.Id}) Deleted.", Severity.Success);
        }
    }
}
