@page "/tables/playerdevice"

@inject YourGameServer.Data.GameDbContext dbContext
@inject MudBlazor.IScrollManager scrollManager
@inject MudBlazor.IDialogService dialogService
@inject MudBlazor.ISnackbar snackBar

<MudExpansionPanel id="@EditPanelId" Text="@EditPanelText" @bind-IsExpanded="_editPanelExpanded">
    <EditForm Model="@_newItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTd>
                    <MudNumericField @bind-Value="_newItem.OwnerId" Label="OwnerId" T="ulong" Min="0" />
                </MudTd>
                <MudTd>
                    <MudSelect @bind-Value="_newItem.DeviceType" Label="DeviceType">
                        @foreach (DeviceType item in Enum.GetValues(typeof(DeviceType)))
                        {
                            <MudSelectItem Value="@item">@(item.GetDisplayName())</MudSelectItem>
                        }
                </MudSelect>
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="_newItem.DeviceId" Label="DeviceId" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.Since" Label="Since"/>
                    <MudTimePicker Time="_newItem.Since?.TimeOfDay" Label="Since" TimeChanged="(t) => _newItem.Since = _newItem.Since?.Date + t" />
                </MudTd>
                <MudTd>
                    <MudDatePicker @bind-Date="_newItem.LastUsed" Label="LastUsed" />
                    <MudTimePicker Time="_newItem.LastUsed?.TimeOfDay" Label="LastUsed" TimeChanged="(t) => _newItem.LastUsed = _newItem.LastUsed?.Date + t" />
                </MudTd>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create New</MudButton>
                <MudButton Class="ml-2" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudExpansionPanel>
<br />
<MudTable T="PlayerDevice" Items="dbContext.PlayerDevices" Filter="Search" CanCancelEdit="true" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="@(async (x) => await ItemHasBeenCommitted(x))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@ListPanelText</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search for PlayerDevices..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>OwnerId</MudTh>
        <MudTh>DeviceType</MudTh>
        <MudTh>DeviceId</MudTh>
        <MudTh>Since</MudTh>
        <MudTh>LastUsed</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="OwnerId">@context.OwnerId</MudTd>
        <MudTd DataLabel="DeviceType">@context.DeviceType</MudTd>
        <MudTd DataLabel="DeviceId">@context.DeviceId</MudTd>
        <MudTd DataLabel="Since">@context.Since?.ToShortDateString()</MudTd>
        <MudTd DataLabel="LastUsed">@context.LastUsed?.ToShortDateString()</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(async () => await Delete(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="OwnerId">
            <MudNumericField @bind-Value="context.OwnerId" Label="OwnerId" T="ulong" Min="0" />
        </MudTd>
        <MudTd DataLabel="DeviceType">
            <MudSelect @bind-Value="context.DeviceType" Label="DeviceType">
                @foreach (DeviceType item in Enum.GetValues(typeof(DeviceType)))
                {
                    <MudSelectItem Value="@item">@(item.GetDisplayName())</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="DeviceId">
            <MudTextField @bind-Value="context.DeviceId" Label="DeviceId" />
        </MudTd>
        <MudTd DataLabel="Since">@context.Since</MudTd>
        <MudTd DataLabel="LastUsed">
            <MudDatePicker @bind-Date="context.LastUsed" Label="LastUsed" />
            <MudTimePicker Time="context.LastUsed?.TimeOfDay" Label="LastUsed" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    bool _editPanelExpanded = false;
    string _searchString = "";
    PlayerDevice _newItem = new();

    PlayerDevice _backup;

    static readonly string EditPanelId =  $"{nameof(PlayerDevice).ToLower()}-edit-panel";
    static readonly string EditPanelText = $"Add {nameof(PlayerDevice)}";
    static readonly string ListPanelText = nameof(PlayerDevice);

    private bool Search(PlayerDevice x)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        if (x.DeviceId.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;

        if ($"{x.Id} {x.OwnerId} {x.Since} {x.LastUsed}".Contains(_searchString)) return true;

        return false;
    }

    async Task OnValidSubmit(EditContext contex)
    {
        dbContext.Add(_newItem);
        await dbContext.SaveChangesAsync();
        snackBar.Add($"New {nameof(PlayerDevice)} (id:{_newItem.Id}) Created.", Severity.Success);
        _newItem = new ();
    }

    void Clear()
    {
        _newItem = new();
    }

    void BackupItem(object x)
    {
        _backup = ((PlayerDevice)x) with {};
    }

    async Task ItemHasBeenCommitted(object x)
    {
        //AddEditionEvent($"RowEditCommit event: Changes to Element {((Element)element).Name} committed");
        var record = (PlayerDevice)x;
        dbContext.Entry(record).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
        await dbContext.SaveChangesAsync();
        snackBar.Add($"{nameof(PlayerDevice)} (id:{record.Id}) Saved.", Severity.Success);
    }

    void ResetItemToOriginalValues(object x)
    {
        //AddEditionEvent($"RowEditCancel event: Editing of Element {((Element)element).Name} cancelled");
        ((PlayerDevice)x).CopyFrom(_backup);
    }

    async Task Save(PlayerDevice x)
    {
        dbContext.Entry(x).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
        await dbContext.SaveChangesAsync();
        snackBar.Add($"{nameof(PlayerDevice)} (id:{x.Id}) Saved.", Severity.Success);
    }

    async Task Delete(PlayerDevice x)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete this records? This process cannot be undone.");
        parameters.Add("ContentSubText", $"{x}");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        if (!(await dialogService.Show<ConfirmDialog>("Delete", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall }).Result).Cancelled) {
            dbContext.PlayerDevices.Remove(x);
            await dbContext.SaveChangesAsync();
            snackBar.Add($"{nameof(PlayerDevice)} (id:{x.Id}) Deleted.", Severity.Success);
        }
    }
}
